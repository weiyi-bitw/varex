#!/usr/bin/env python

import sys
import operator
from varex import LabeledMat
from varex.commons.LabeledMat import LabeledMat
from sklearn.cluster import AffinityPropagation

import plotly.plotly as py
from plotly.graph_objs import *


def clusterMatrix(x):
    af_var = AffinityPropagation().fit(x.data)

    var_cluster_count = {}
    for l in set(af_var.labels_):
        var_cluster_count[l] = list(af_var.labels_).count(l)

    var_cluster_order = sorted(var_cluster_count.items(), key = operator.itemgetter(1))        
    var_cluster_order = map(lambda x: x[0], var_cluster_order)
    var_cluster_order.reverse()

    x.transpose()


    af_sample = AffinityPropagation().fit(x.data)

    sample_cluster_count = {}
    for l in set(af_sample.labels_):
        sample_cluster_count[l] = list(af_sample.labels_).count(l)

    sample_cluster_order = sorted(sample_cluster_count.items(), key = operator.itemgetter(1))        
    sample_cluster_order = map(lambda x: x[0], sample_cluster_order)
    sample_cluster_order.reverse()

    x.transpose() # row: variants, col: samples
    newSampleOrder = []
    newVarOrder = []

    for l in sample_cluster_order:
        for i in range(x.data.shape[1]):
            if af_sample.labels_[i] == l:
                newSampleOrder.append(i)



    for l in var_cluster_order:
        for i in range(x.data.shape[0]):
            if af_var.labels_[i] == l:
                newVarOrder.append(i)

    y = x[newVarOrder, newSampleOrder]
    return y

def main():
    py.sign_in("mdsfdwei1", "1218eamhn2")
    
    x = LabeledMat.loadFile(sys.argv[1], sep='\t', dt=float)
    x = clusterMatrix(x)
    samples = x.colnames
    variants = x.rownames

    aac = []

    for l in x.data:
        aac.append(l)

    data = Data([
        Heatmap(
            z = aac,
            x = samples,
            y = variants
            )
        ])
    
    plot_url = py.plot(data, filename=sys.argv[2])

if __name__ == "__main__":
    sys.exit(main());


