#!/usr/bin/env python

import sys
import os
import argparse
from varnorm.VCFNormalization import VCFNormalization

def normalize_vel(vkey):
    qq = VCFNormalization(
                inFile = None,
                genome = args.reference,
                vkey=False,
                verbose=args.verbose
            )
    fi = gzip.open(args.inFile, 'rb') if args.inFile.endswith('gz') else open(args.inFile, 'rb')
    fo = open(args.output, 'wb') if type(args.output)==str else sys.stdout
    
    vkeyMap = {}
    for l in fi:
        tokens = l.strip().split('\t')
        vk = tokens[1]
        if vk == 'None':
            continue
        if vk in vkeyMap:
            tokens[1] = vkeyMap[vk]
        else:
            tokens[1] = qq.normAVkey(vk)
            vkeyMap[vk] = tokens[1]
        if tokens[1] == None:
            continue

        print >> fo, '\t'.join(tokens)
        if len(vkeyMap) >= 1000000:
            vkeyMap.clear()

    if fo != sys.stdout:
        fo.close()


if __name__ == '__main__':
    parser = argparse.ArgumentParser (description = __doc__, \
            formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('inFile', metavar='INPUT_FILE', \
            help="Input file in vel format.")
    parser.add_argument('-o', '--output', metavar='OUTPUT_FILE', \
            default=sys.stdout, \
            help='Output file. Default: stdout')
    parser.add_argument('--reference', metavar='REF_GENOME', \
            default=os.environ['HG19'], \
            help='Path to reference genome .fa file. Default: $HG19 environmental variable.')
    parser.add_argument('-v', '--verbose', \
            action='store_true', \
            default=False, \
            help='Run in verbose mode.')
    args = parser.parse_args()
    sys.exit(normalize_vel(args))
