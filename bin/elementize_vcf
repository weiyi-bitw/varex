#!/usr/bin/env python

import sys
import os
import gzip
import argparse
import time
import re
#from varnorm.VCFNormalization import VCFNormalization
from varnorm.varcharkey import VarCharKey
from varex.commons.VCFEntry import VCFEntry

def main(args):
    
    fi = gzip.open(args.inFile, 'rb') if args.inFile.endswith('gz') else open(args.inFile, "rb") 
    fo = open(args.outFile, "wb")
    #qq = VCFNormalization(
    #            inFile = None,
    #            genome = os.environ['HG19'],
    #            vkey=True,
    #            verbose=True
    #        )
    ssid = args.dataset
    idmap = None
    if args.id:
        idmap = {}
        for l in open(args.id, 'rb'):
            tokens = l.strip().split('\t')
            idmap[tokens[0]] = tokens[1]

    for l in fi:
        if l.startswith('#'):
            continue
        tokens = l.strip().split('\t')
        [chrom, pos, dbsnp, ref, alts] = tokens[:5]
        start = int(pos)
        end = start + len(ref) - 1
        alts = alts.split(',')
        
        for a in range(len(alts)):
            alt = alts[a]
            [start_norm, end_norm, ref_norm, alt_norm] = [start, end, ref, alt]

            #if len(ref) > 1 or len(alt) > 1 or '.' in [ref, alt]:
            #    [chrom, start_norm, end_norm, ref_norm, alt_norm] = qq.normAVar(chrom, start, end, ref, alt)
            if ref_norm == alt_norm:
                continue
            vkey = VarCharKey.v2k(chrom, start_norm, end_norm, alt_norm)
            if vkey == 'None' or not vkey:
                continue
            qual = tokens[5] if tokens[5] != '.' else -1
            filt = tokens[6]
            infos = tokens[7]
            formats = tokens[8].split(':')
            
            for i in range(9,len(tokens)):
                pid = idmap[str(i-9)] if idmap else i-9 
                ac = None
                thisqual = qual
                thisfilt = 1 if filt == 'PASS' else 0
                gq = -1
                dp = -1
                ad = -1
                for f, v in zip(formats, tokens[i].split(':')):
                    if f == 'GT':
                        if '.' in v:
                            ac = -1
                        else:
                            ac = v.count(str(a+1))
                    elif f == 'QUAL' and v != '.':
                        thisqual = v
                    elif f == 'FILTER' and v != '.':
                        thisfilt = v
                    elif f == 'GQ' and v != '.':
                        gq = int(v)
                    elif f == 'DP' and v != '.':
                        dp = int(v)
                    elif f == 'AD' and '.' not in v:
                        try:
                            ad = int(v.split(',')[a+1])
                        except IndexError:
                            continue
                if ac == 0 or not ac:
                    continue
                print >> fo, VCFEntry(vkey, ssid, pid, ac, thisfilt, thisqual, gq, dp, ad)


if __name__ == "__main__":
    parser = argparse.ArgumentParser (description = __doc__, \
            formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('inFile', metavar='INPUT_FILE', \
            help="Input vcf file.")
    parser.add_argument('outFile', metavar='OUTPUT_FILE', \
            help="Output elementized vcf entries.")
    parser.add_argument('-s', '--dataset', \
            metavar='DATASET',
            default='DATASET_' + str(round(time.time() * 1000)), \
            help='Data set ID.')
    parser.add_argument('--id', \
            metavar='ID_FILE',
            default=None,
            help='Map file link column index to sample ID'
            )
    args = parser.parse_args()
    sys.exit(main(args))



